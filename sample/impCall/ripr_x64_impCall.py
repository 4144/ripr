from unicorn import *
from unicorn.x86_const import *

import struct
class x64_test(object):
    def __init__(self):
        self.mu = Uc(UC_ARCH_X86, UC_MODE_64)
        self.code_0 = '554889e54883ec20897dec488975e0bf24064000e8b1feffffbf2b064000e8a7feffffbf10000000e8bdfeffff488945f8b839050000c9c3'.decode('hex') 

        self.data_0 = '7f454c4602010100000000000000000002003e000100000070044000000000004000000000000000101a0000000000000000000040003800090040001f001c000600000005000000400000000000000040004000000000004000400000000000f801000000000000f801000000000000080000000000000003000000040000003802000000000000380240000000000038024000000000001c000000000000001c00000000000000010000000000000001000000050000000000000000000000000040000000000000004000000000006407000000000000640700000000000000002000000000000100000006000000100e000000000000100e600000000000100e6000000000003002000000000000380200000000000000002000000000000200000006000000280e000000000000280e600000000000280e600000000000d001000000000000d0010000000000000800000000000000040000000400000054020000000000005402400000000000540240000000000044000000000000004400000000000000040000000000000050e57464040000003c060000000000003c064000000000003c0640000000000034000000000000003400000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000100e000000000000100e600000000000100e600000000000f001000000000000f00100000000000001000000000000002f6c696236342f6c642d6c696e75782d7838362d36342e736f2e3200040000001000000001000000474e550000000000020000000600000020000000040000001400000003000000474e55003b8bb2461789239e07edd14441907882f5686d1e01000000010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0000001200000000000000000000000000000000000000170000001200000000000000000000000000000000000000290000002000000000000000000000000000000000000000100000001200000000000000000000000000000000000000006c6962632e736f2e360070757473006d616c6c6f63005f5f6c6962635f73746172745f6d61696e005f5f676d6f6e5f73746172745f5f00474c4942435f322e322e350000000200020000000200000001000100010000001000000000000000751a6909000002003800000000000000f80f600000000000060000000300000000000000000000001810600000000000070000000100000000000000000000002010600000000000070000000200000000000000000000002810600000000000070000000400000000000000000000004883ec08488b05ed0b20004885c07405e84b0000004883c408c3000000000000ff35e20b2000ff25e40b20000f1f4000ff25e20b20006800000000e9e0ffffffff25da0b20006801000000e9d0ffffffff25d20b20006802000000e9c0ffffffff25920b20006690000000000000000031ed4989d15e4889e24883e4f0505449c7c01006400048c7c1a005400048c7c766054000e8a7fffffff4660f1f440000b84710600055482d401060004883f80e4889e5761bb8000000004885c074115dbf40106000ffe0660f1f8400000000005dc30f1f4000662e0f1f840000000000be40106000554881ee4010600048c1fe034889e54889f048c1e83f4801c648d1fe7415b8000000004885c0740b5dbf40106000ffe00f1f005dc3660f1f440000803d190b2000007511554889e5e86effffff5dc605060b200001f3c30f1f4000bf200e600048833f007505eb930f1f00b8000000004885c074f1554889e5ffd05de97affffff554889e54883ec20897dec488975e0bf24064000e8b1feffffbf2b064000e8a7feffffbf10000000e8bdfeffff488945f8b839050000c9c36690415741564189ff415541544c8d255e08200055488d2d5e082000534989f64989d54c29e54883ec0848c1fd03e82ffeffff4885ed742031db0f1f8400000000004c89ea4c89f64489ff41ff14dc4883c3014839eb75ea4883c4085b5d415c415d415e415fc390662e0f1f840000000000f3c300004883ec084883c408c30000000100020048656c6c6f21005468697320697320612074657374000000011b033b3000000005000000e4fdffff7c00000034feffff4c0000002affffffa400000064ffffffc4000000d4ffffff0c0100001400000000000000017a5200017810011b0c070890010710140000001c000000e0fdffff2a00000000000000000000001400000000000000017a5200017810011b0c070890010000240000001c00000060fdffff40000000000e10460e184a0f0b770880003f1a3b2a332422000000001c000000440000007efeffff3800000000410e108602430d06730c0708000000440000006400000098feffff6500000000420e108f02420e188e03450e208d04420e288c05480e308606480e3883074d0e40720e38410e30410e28420e20420e18420e10420e080014000000ac000000c0feffff02000000000000000000000000000000'.decode('hex') 

        self.mu.mem_map(0x400000L,0x200000)
        self.mu.mem_map(0x7ffff000,0x200000)

        self.mu.mem_write(0x400000L, self.data_0)
        self.mu.mem_write(0x400566L, self.code_0)

        self.hookdict = {4195721L: 'hook_puts', 4195731L: 'hook_malloc', 4195711L: 'hook_puts'}
    # Do whatever we want in hooked functions
    def hook_puts(self):
        print ("===========In Puts==========")
        arg = self.mu.reg_read(UC_X86_REG_RDI)
        mem = self.mu.mem_read(arg, 0x200)
        print ("Puts would have Printed: %s" % (mem.split("\x00")[0]))
        print ("===========Leaving Puts==========")

    def hook_malloc(self):
        print ("===========In Malloc==========")
        print ("===========Leaving Malloc===========")
    

    def _start_unicorn(self, startaddr):
        try:
            self.mu.emu_start(startaddr, 0)
        except Exception as e:
            if self.mu.reg_read(UC_X86_REG_RIP) == 1:
                return
            retAddr = struct.unpack("<q", self.mu.mem_read(self.mu.reg_read(UC_X86_REG_RSP), 8))[0]
            if retAddr in self.hookdict.keys():
                getattr(self, self.hookdict[retAddr])()
                self.mu.reg_write(UC_X86_REG_RSP, self.mu.reg_read(UC_X86_REG_RSP) + 8)
                self._start_unicorn(retAddr)
            else:
                raise e
    def run(self):
        self.mu.reg_write(UC_X86_REG_RSP, 0x7fffffff)
        self.mu.mem_write(0x7fffffff, '\x01\x00\x00\x00')
        self._start_unicorn(0x400566)
        return self.mu.reg_read(UC_X86_REG_RAX)

x = x64_test()
print (x.run())
