from unicorn import *
from unicorn.x86_const import *

import struct
class x86_test(object):
    def __init__(self):
        self.mu = Uc(UC_ARCH_X86, UC_MODE_32)
        self.code_0 = '8d4c240483e4f0ff71fc5589e55183ec1483ec0c6810850408e8b7feffff83c41083ec0c6817850408e8a7feffff83c41083ec0c6a10e88afeffff83c4108945f4b8390500008b4dfcc98d61fcc3'.decode('hex') 

        self.data_0 = '7f454c4601010100000000000000000002000300010000004083040834000000fc1700000000000034002000090028001f001c0006000000340000003480040834800408200100002001000005000000040000000300000054010000548104085481040813000000130000000400000001000000010000000000000000800408008004082006000020060000050000000010000001000000080f0000089f0408089f0408180100001c010000060000000010000002000000140f0000149f0408149f0408e8000000e80000000600000004000000040000006801000068810408688104084400000044000000040000000400000050e574642805000028850408288504082c0000002c000000040000000400000051e574640000000000000000000000000000000000000000060000001000000052e57464080f0000089f0408089f0408f8000000f800000004000000010000002f6c69622f6c642d6c696e75782e736f2e320000040000001000000001000000474e550000000000020000000600000020000000040000001400000003000000474e5500d79d821a6f3746d157195b2bb4ad804cde75b58502000000050000000100000005000000002000200000000005000000ad4be3c0000000000000000000000000000000001f0000000000000000000000120000001a00000000000000000000001200000038000000000000000000000020000000260000000000000000000000120000000b0000000c8504080400000011001000006c6962632e736f2e36005f494f5f737464696e5f757365640070757473006d616c6c6f63005f5f6c6962635f73746172745f6d61696e005f5f676d6f6e5f73746172745f5f00474c4942435f322e3000000000020002000000020001000000010001000100000010000000000000001069690d000002004700000000000000fc9f0408060300000ca004080701000010a004080702000014a00408070400005383ec08e89b00000081c32b1d00008b83fcffffff85c07405e84600000083c4085bc300ff3504a00408ff2508a0040800000000ff250ca004086800000000e9e0ffffffff2510a004086808000000e9d0ffffffff2514a004086810000000e9c0ffffffff25fc9f04086690000000000000000031ed5e89e183e4f050545268f084040868908404085156683b840408e8bffffffff466906690669066906690669066908b1c24c3669066906690669066906690b823a004082d20a0040883f806761ab80000000085c074115589e583ec146820a00408ffd083c410c9f3c3908d742600b820a004082d20a00408c1f80289c2c1ea1f01d0d1f8741bba0000000085d274125589e583ec10506820a00408ffd283c410c9f3c38d7426008dbc2700000000803d20a004080075135589e583ec08e87cffffffc60520a0040801c9f3c36690b8109f04088b1085d27505eb938d7600ba0000000085d274f25589e583ec1450ffd283c410c9e975ffffff8d4c240483e4f0ff71fc5589e55183ec1483ec0c6810850408e8b7feffff83c41083ec0c6817850408e8a7feffff83c41083ec0c6a10e88afeffff83c4108945f4b8390500008b4dfcc98d61fcc36690669066909055575653e8d7feffff81c3671b000083ec0c8b6c24208db30cffffffe81bfeffff8d8308ffffff29c6c1fe0285f6742531ff8db60000000083ec04ff74242cff74242c55ff94bb08ffffff83c70183c41039f775e383c40c5b5e5f5dc38d7600f3c300005383ec08e873feffff81c3031b000083c4085bc3030000000100020048656c6c6f21005468697320697320612074657374000000011b033b2800000004000000c8fdffff4400000013ffffff6800000068ffffff94000000c8ffffffe00000001400000000000000017a5200017c08011b0c040488010000200000001c0000007cfdffff40000000000e08460e0c4a0f0b740478003f1a3b2a3224222800000040000000a3feffff4e00000000440c0100471005027500430f03757c067b0c010041c5430c040400480000006c000000ccfeffff5d00000000410e088502410e0c8703410e108604410e1483054e0e20690e24440e28440e2c410e304d0e20470e1441c30e1041c60e0c41c70e0841c50e04000010000000b8000000e0feffff020000000000000000000000'.decode('hex') 

        self.mu.mem_map(0x8048000L,0x200000)
        self.mu.mem_map(0x7ffff000,0x200000)

        self.mu.mem_write(0x8048000L, self.data_0)
        self.mu.mem_write(0x804843bL, self.code_0)

        self.hookdict = {134513753L: 'hook_puts', 134513782L: 'hook_malloc', 134513769L: 'hook_puts'}
    def hook_puts(self):
        print ("===========In Puts==========")
        arg = self.mu.reg_read(UC_X86_REG_ESP)
        arg2 = self.mu.mem_read(arg+4, 0x4)
        arg2 = struct.unpack("<i", str(arg2))[0]
        mem = self.mu.mem_read(arg2, 0x200)
        print ("Puts would have Printed: %s" % (mem.split("\x00")[0]))
        print ("===========Leaving Puts==========")

    def hook_malloc(self):
        print ("===========In Malloc==========")
        print ("===========Leaving Malloc===========")
    
    def _start_unicorn(self, startaddr):
        try:
            self.mu.emu_start(startaddr, 0)
        except Exception as e:
            if self.mu.reg_read(UC_X86_REG_EIP) == 1:
                return
            retAddr = struct.unpack("<i", self.mu.mem_read(self.mu.reg_read(UC_X86_REG_ESP), 4))[0]
            if retAddr in self.hookdict.keys():
                getattr(self, self.hookdict[retAddr])()
                self.mu.reg_write(UC_X86_REG_ESP, self.mu.reg_read(UC_X86_REG_ESP) + 4)
                self._start_unicorn(retAddr)
            else:
                raise e
    def run(self):
        self.mu.reg_write(UC_X86_REG_ESP, 0x7fffffff)
        self.mu.mem_write(0x7fffffff, '\x01\x00\x00\x00')
        self._start_unicorn(0x804843b)
        return self.mu.reg_read(UC_X86_REG_EAX)

x = x86_test()
print (x.run())
